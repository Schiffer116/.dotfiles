(include "./bar/infos.yuck")

(defwidget power []
  (eventbox :class "power-event-box"
            :cursor "pointer"
            :onclick "powermenu.sh open"
    (label :class "os-logo"
           :text "")))

(deflisten ws_cur "hyprctl activeworkspace -j | jq '.id'")
(deflisten ws_prv "hyprctl activeworkspace -j | jq '.id'")

(defwidget workspace [number]
    (eventbox :class "workspace"
              :cursor "pointer"
              :onclick "hyprctl dispatch workspace ${number}"
    (box :space-evenly false
      (label :text {number == ws_cur ? "" : ""}
             :class "workspace-label${number == ws_cur || number == ws_prv ? '-active' : ''}"))))

(defwidget workspaces []
  (box :class "workspaces"
    (workspace :number 1)
    (workspace :number 2)
    (workspace :number 3)
    (workspace :number 4)
    (workspace :number 5)))

(defvar cur_win "kitty")
(defwidget current_window []
    (label :text cur_win
           :truncate true
           :limit-width 35
           :style "margin-left: 10px"))

(defwidget hardware [value icon thickness position css_class info_window]
  (eventbox :class {css_class}
    (circular-progress :class "circle ${position}"
                       :value value
                       :start-at 75
                       :thickness {thickness}
        (label :class "circ-icon ${position}"
               :text {icon}))))

(defwidget cpu [icon thickness ?role]
    (hardware :value {EWW_CPU.avg}
              :icon icon
              :thickness thickness
              :position role
              :css_class "cpu"
              :info_window "cpu_info"))

(defwidget ram [icon thickness ?role]
    (hardware :value {EWW_RAM.used_mem_perc}
              :icon icon
              :thickness thickness
              :position role
              :css_class "ram"
              :info_window "ram_info"))

(defwidget disk [icon thickness ?role]
    (hardware :value {EWW_DISK["/"].used_perc}
              :icon icon
              :thickness thickness
              :position role
              :css_class "disk"
              :info_window "disk_info"))

(defvar full_time false)

(defwidget clock []
  (eventbox :onclick "${EWW_CMD} open --toggle calendar"
            :onhover "${EWW_CMD} update full_time=true"
            :onhoverlost "${EWW_CMD} update full_time=false"
            :cursor "pointer"
    (box :class "clock"
         :space-evenly false
      (revealer :transition "slideleft"
                :reveal full_time
                :duration "300ms"
        (label :text {formattime(EWW_TIME, "%a, %b %d, ")}))
      (label :text {formattime(EWW_TIME, "%H:%M")})
      (revealer :transition "slideright"
                :reveal full_time
                :duration "300ms"
        (label :text {formattime(EWW_TIME, ":%S")})))))

(defwidget battery [?role]
  (box :space-evenly false
       :class "pill-wrapper"
    (label :class "battery ${role}"
           :text { EWW_BATTERY.BAT0.status == "Charging" ? "󱐌" :
                   EWW_BATTERY.BAT0.capacity <= 20 ? "" :
                   EWW_BATTERY.BAT0.capacity <= 40 ? "" :
                   EWW_BATTERY.BAT0.capacity <= 60 ? "":
                   EWW_BATTERY.BAT0.capacity <= 80 ? "" : "" })
    (label :class "battery"
           :style "font-size: 15px; margin-left: 0"
           :text "${EWW_BATTERY.BAT0.capacity}%")))

(deflisten volume "volume.sh get")
(deflisten muted "volume.sh is-muted")

(defwidget sound [volume]
  (eventbox :onscroll "[ {} = 'up' ] && volume.sh increase || volume.sh decrease"
            :onclick "pavucontrol &"
            :onrightclick "blueman-manager &"
            :cursor "pointer"
    (box :space-evenly false
         :class "pill-wrapper"
      (label :class "sound"
             :text { muted ? "󰝟" :
                     volume < 34 ? "" :
                     volume < 67 ? "" : "" })
      (label :class "sound"
             :style "font-size: 15px; margin-left: 0"
             :text "${volume}%"))))

(deflisten network_name "nmcli --terse --fields 'NAME' connection show --active | head -1;
                         nmcli connection monitor | awk -F ':' '{ print $1; fflush() }'")

(defpoll network_strength :interval "5s"
                          :initial "N/A"
                          `nmcli -t -f SIGNAL,ACTIVE device wifi | awk -F':' '{ if ($2 == "yes") print $1 }'`)

(defwidget network [?role]
  (box :space-evenly false
       :class "pill-wrapper"
  (label :class "network ${role}"
         :text { network_strength == "" ? "󰤮" :
                 network_strength < 26 ? "󰤟" :
                 network_strength < 51 ? "󰤢" :
                 network_strength < 76 ? "󰤥" : "󰤨" })
  (label :class "network"
         :style "font-size: 15px; margin-left: 0"
         :text network_name)))

(deflisten brightness "brightness.sh get")
(defwidget backlight [brightness]
  (eventbox :onscroll "[ {} = 'up' ] && brightness.sh increase || brightness.sh decrease"
    (box :space-evenly false
         :class "pill-wrapper"
      (label :class "backlight"
             :text { brightness < 26 ? "󰃞" :
                     brightness < 51 ? "󰃝" :
                     brightness < 76 ? "󰃟" : "󰃠" })
      (label :class "backlight"
             :style "font-size: 15px; margin-left: 0"
             :text "${brightness}%"))))

(defvar color_temp 1000)
(defwidget temp []
  (eventbox :onhover "${EWW_CMD} update show_temp_slider=true"
            :onhoverlost "${EWW_CMD} update show_temp_slider=false"
    (box :space-evenly false
         :class "pill-wrapper"
      (label :class "color-temp"
             :text { color_temp < 2000 ? "" :
                     color_temp < 3000 ? "" :
                     color_temp < 4000 ? "" :
                     color_temp < 5000 ? "" : "" })
      (label :class "color-temp"
             :style "font-size: 15px; margin-left: 0"
             :text "${color_temp}"))))

(defvar show_all_lang false)
(defvar all_lang '["E","J","V"]')
(defvar cur_lang "E")
(defwidget language []
  (eventbox :cursor "pointer"
            :onhover "${EWW_CMD} update show_all_lang=true"
            :onhoverlost "${EWW_CMD} update show_all_lang=false"
    (box :space-evenly false
      (for language in all_lang
        (revealer :transition "slideleft"
                  :reveal {cur_lang == language || show_all_lang}
                  :duration "300ms"
            (button :class "lang-button"
                    :onclick "language.sh set ${language}; ${EWW_CMD} update show_all_lang=false"
              (label :class "language"
                     :text {language})))))))
