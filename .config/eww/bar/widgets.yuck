(include "./bar/infos.yuck")

(defwidget power []
  (eventbox :class "power-event-box"
            :cursor "pointer"
            :onclick "powermenu.sh open"
    (label :class "os-logo"
           :text "")))

(defvar ws_cur 1)
(defvar ws_prv 1)

(defwidget workspace [number]
    (eventbox :class "workspace"
              :cursor "pointer"
              :onclick "hyprctl dispatch workspace ${number}"
    (box :space-evenly false
      (label :text {number == ws_cur ? "" : ""}
             :class "workspace-label${number == ws_cur || number == ws_prv ? '-active' : ''}"))))

(defwidget workspaces []
  (box :class "workspaces"
    (workspace :number 1)
    (workspace :number 2)
    (workspace :number 3)
    (workspace :number 4)
    (workspace :number 5)))

(defwidget hardware [value icon thickness position css_class info_window]
  (eventbox :class {css_class}
    (circular-progress :class "circle ${position}"
                       :value value
                       :start-at 75
                       :thickness {thickness}
        (label :class "circ-icon ${position}"
               :text {icon}))))

(defwidget cpu [icon thickness ?role]
    (hardware :value {EWW_CPU.avg}
              :icon icon
              :thickness thickness
              :position role
              :css_class "cpu"
              :info_window "cpu_info"))

(defwidget ram [icon thickness ?role]
    (hardware :value {EWW_RAM.used_mem_perc}
              :icon icon
              :thickness thickness
              :position role
              :css_class "ram"
              :info_window "ram_info"))

(defwidget disk [icon thickness ?role]
    (hardware :value {EWW_DISK["/"].used_perc}
              :icon icon
              :thickness thickness
              :position role
              :css_class "disk"
              :info_window "disk_info"))

(defvar full_time false)

(defwidget clock []
  (eventbox :onclick "${EWW_CMD} open --toggle calendar"
            :onhover "${EWW_CMD} update full_time=true"
            :onhoverlost "${EWW_CMD} update full_time=false"
            :cursor "pointer"
    (box :class "clock"
         :space-evenly false
      (revealer :transition "slideleft"
                :reveal full_time
                :duration "300ms"
        (label :text {formattime(EWW_TIME, "%a, %b %d, ")}))
      (label :text {formattime(EWW_TIME, "%H:%M")})
      (revealer :transition "slideright"
                :reveal full_time
                :duration "300ms"
        (label :text {formattime(EWW_TIME, ":%S")})))))

(defwidget battery [?role]
  (label :class "battery ${role}"
         :text { EWW_BATTERY.BAT0.status == "Charging" ? "󱐌" :
                 EWW_BATTERY.BAT0.capacity <= 20 ? "" :
                 EWW_BATTERY.BAT0.capacity <= 40 ? "" :
                 EWW_BATTERY.BAT0.capacity <= 60 ? "":
                 EWW_BATTERY.BAT0.capacity <= 80 ? "" : "" }))

(defvar show_sound_slider false)
(defpoll volume :interval "3600s"
                "volume.sh --get")
(defpoll muted :interval "3600s"
               "volume.sh --get-mute")

(defwidget sound [volume]
  (eventbox :onhover "${EWW_CMD} update show_sound_slider=true"
            :onhoverlost "${EWW_CMD} update show_sound_slider=false"
            :onclick "pavucontrol"
            :onrightclick "blueman-manager"
            :cursor "pointer"
    (box :space-evenly false
      (label :class "sound"
             :text { muted ? "󰝟" :
                     volume < 34 ? "" :
                     volume < 67 ? "" : "" })
      (revealer :transition "slideleft"
                :reveal show_sound_slider
                :duration "300ms"
        (scale :class "volume-scale"
               :min 0
               :max 101
               :value volume
               :orientation "h"
               :onchange "volume.sh --set {}")))))

(defpoll network_strength :interval "5s"
                          :initial "N/A"
                          `nmcli -t -f SIGNAL,ACTIVE device wifi | awk -F':' '{ if ($2 == "yes") print $1 }'`)

(defwidget network [?role]
  (label :class "network ${role}"
         :text { network_strength == "" ? "󰤮" :
                 network_strength < 26 ? "󰤟" :
                 network_strength < 51 ? "󰤢" :
                 network_strength < 76 ? "󰤥" : "󰤨" }))

(defpoll brightness :interval "3600s"
                    "brightness.sh get")
(defvar show_light_slider false)
(defwidget backlight [brightness]
  (eventbox :onhover "${EWW_CMD} update show_light_slider=true"
            :cursor "pointer"
            :onhoverlost "${EWW_CMD} update show_light_slider=false"
    (box :space-evenly false
      (label :class "backlight"
             :text { brightness < 26 ? "󰃞" :
                     brightness < 51 ? "󰃝" :
                     brightness < 76 ? "󰃟" : "󰃠" })
      (revealer :transition "slideleft"
                :reveal show_light_slider
                :duration "300ms"
        (scale :class "backlight-scale"
               :min 1
               :max 101
               :value brightness
               :orientation "h"
               :onchange "brightness.sh set {}")))))

(defvar color_temp 1000)
(defvar show_temp_slider false)
(defwidget temp []
  (eventbox :onhover "${EWW_CMD} update show_temp_slider=true"
            :onhoverlost "${EWW_CMD} update show_temp_slider=false"
    (box :space-evenly false
      (label :class "color-temp"
             :text { color_temp < 2000 ? "" :
                     color_temp < 3000 ? "" :
                     color_temp < 4000 ? "" :
                     color_temp < 5000 ? "" : "" })
      (revealer :transition "slideleft"
                :reveal show_temp_slider
                :duration "300ms"
        (scale :class "temp-scale"
               :min 1000
               :max 6500
               :value color_temp
               :orientation "h"
               :onchange "pkill gammastep; ${EWW_CMD} update color_temp={}; gammastep -O $(( 6500 - {} + 1000 ))K &")))))

(defvar show_all_lang false)
(defvar all_lang '["E","J","V"]')
(defvar cur_lang "E")
(defwidget language []
  (eventbox :cursor "pointer"
            :onhover "${EWW_CMD} update show_all_lang=true"
            :onhoverlost "${EWW_CMD} update show_all_lang=false"
    (box :space-evenly false
      (for language in all_lang
        (revealer :transition "slideleft"
                  :reveal {cur_lang == language || show_all_lang}
                  :duration "300ms"
            (button :class "lang-button"
                    :onclick "language.sh set ${language}; ${EWW_CMD} update show_all_lang=false"
              (label :class "language"
                     :text {language})))))))
